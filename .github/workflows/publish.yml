name: Publish Artifact

concurrency:
  group: PublishArtifact
  cancel-in-progress: false

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build-and-run-linting:
    name: Run linting
    uses: ./.github/workflows/linting.yml

  build-and-run-tests:
    name: Run tests
    uses: ./.github/workflows/tests.yml
    secrets:
      codecov_token: ${{ secrets.CODECOV_TOKEN }}

  build-test-and-publish:
    needs: [build-and-run-linting, build-and-run-tests]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.build-and-run-tests.outputs.commit-hash }}
          fetch-depth: 0

      - name: Remove unnecessary files
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"

      - name: Extract version from pyproject.toml
        run: echo "LIB_VERSION=v$(awk '/^\[tool.poetry\]/ {flag=1; next} /version/ && flag {print $3; flag=0}' pyproject.toml | tr -d '\"')" >> $GITHUB_ENV

      - name: Check Docker Version
        run: docker --version

      - name: Create .git-credentials file
        run: |
          echo "https://ugm2:${{ secrets.GH_TOKEN }}@github.com" > .git-credentials

      - name: Login to GitHub Container Registry
        run: echo "${{ secrets.GH_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Log in to the Docker registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: ghcr.io/guexit/guexit-image-generation:${{ env.LIB_VERSION }}
          build-args: |
            LIB_VERSION=${{ env.LIB_VERSION }}
          secrets: |
            GIT_CREDENTIALS=${{ secrets.GH_TOKEN }}
          cache-from: type=registry,ref=ghcr.io/guexit/guexit-image-generation:cache
          cache-to: type=registry,ref=ghcr.io/guexit/guexit-image-generation:cache,mode=max

      - name: Create GitHub Release ${{ env.LIB_VERSION }}
        if: github.ref == 'refs/heads/main'
        run: |
          gh release create \
            --title "Guexit.ImageGeneration ${{ env.LIB_VERSION }}" \
            --target ${{ needs.build-and-run-tests.outputs.commit-hash }} \
            --generate-notes \
            ${{ env.LIB_VERSION }}
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Notify Discord with Release Notes
        run: |
          RELEASE_NOTES_JSON=$(curl -H "Authorization: token ${{ secrets.GH_TOKEN }}" \
          "https://api.github.com/repos/Guexit/Guexit.ImageGeneration/releases/tags/${{ env.LIB_VERSION }}" | jq -r ".body")
          echo "RELEASE_NOTES_JSON=$RELEASE_NOTES_JSON" >> $GITHUB_ENV
          FINAL_PAYLOAD=$(jq -n --arg rn "$RELEASE_NOTES_JSON" \
          '{content: ("**Image Generation ${{ env.LIB_VERSION }}**\n" + $rn)}')
          echo "Final Payload: $FINAL_PAYLOAD"
          curl -H "Content-Type: application/json" \
          -X POST \
          -d "$FINAL_PAYLOAD" \
          ${{ secrets.DISCORD_WEBHOOK }}
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}

      - name: Get Release Notes
        run: |
          RELEASE_NOTES_JSON=$(curl -H "Authorization: token ${{ secrets.GH_TOKEN }}" \
          "https://api.github.com/repos/Guexit/Guexit.ImageGeneration/releases/tags/${{ env.LIB_VERSION }}" | jq -r ".body" | base64)
          echo "RELEASE_NOTES_BASE64=$RELEASE_NOTES_JSON" >> $GITHUB_ENV

      - name: Send Notification to Discord Release Channel
        run: |
          RELEASE_NOTES=$(echo $RELEASE_NOTES_BASE64 | base64 --decode)
          FINAL_PAYLOAD=$(jq -n --arg rn "$RELEASE_NOTES" \
          '{content: ("**Image Generation ${{ env.LIB_VERSION }}**\n" + $rn)}')
          echo "Final Payload: $FINAL_PAYLOAD"
          curl -H "Content-Type: application/json" \
          -X POST \
          -d "$FINAL_PAYLOAD" \
          ${{ secrets.DISCORD_WEBHOOK }}
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
