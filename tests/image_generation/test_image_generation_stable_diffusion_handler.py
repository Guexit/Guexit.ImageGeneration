import unittest
from unittest.mock import MagicMock, call
from image_generation.api.models import Prompt, TextToImage
from image_generation.core.stable_diffusion import (
    StableDiffusionHandler,
    StableDiffusionPipeline,
)


class TestStableDiffusionHandler(unittest.TestCase):
    def setUp(self):
        self.mocked_pipeline = MagicMock()
        self.original_from_pretrained = StableDiffusionPipeline.from_pretrained
        StableDiffusionPipeline.from_pretrained = MagicMock(
            return_value=self.mocked_pipeline
        )

        self.model_path = "test_model_path"
        self.handler = StableDiffusionHandler(self.model_path)

    def tearDown(self):
        StableDiffusionPipeline.from_pretrained = self.original_from_pretrained

    def test_txt_to_img(self):
        test_text_to_image = TextToImage(
            prompt=Prompt(
                positive="A beautiful landscape with a clear sky",
                negative="bad quality, pixelated",
                guidance_scale=5.0,
            ),
            height=512,
            width=512,
            num_inference_steps=50,
            num_images=1,
        )

        test_image = self.handler.txt_to_img(test_text_to_image)

        # Check if the self.pipe() was called with the correct arguments in the last call
        last_call_args = self.mocked_pipeline.call_args_list[-1]
        expected_call = call(
            prompt=test_text_to_image.prompt.positive,
            negative_prompt=test_text_to_image.prompt.negative,
            guidance_scale=test_text_to_image.prompt.guidance_scale,
            height=test_text_to_image.height,
            width=test_text_to_image.width,
            num_inference_steps=test_text_to_image.num_inference_steps,
            num_images_per_prompt=test_text_to_image.num_images,
            generator=self.handler._set_seed(test_text_to_image.seed),
        )
        self.assertEqual(last_call_args, expected_call)

        # Check if the returned image is the one generated by the mocked pipeline
        self.assertEqual(
            test_image[0],
            self.mocked_pipeline.return_value.images.__getitem__.return_value,
        )

    def test_pipeline_property(self):
        self.assertEqual(self.handler.pipe, self.mocked_pipeline)


if __name__ == "__main__":
    unittest.main()
