import unittest
from unittest.mock import ANY, MagicMock, call, patch

import torch

from image_generation.api.models import Prompt, TextToImage
from image_generation.core.schedulers import SchedulerEnum
from image_generation.core.stable_diffusion import (
    StableDiffusionHandler,
    StableDiffusionPipeline,
)
from image_generation.utils import enough_gpu_memory


class TestStableDiffusionHandler(unittest.TestCase):
    def setUp(self):
        self.mocked_pipeline = MagicMock()
        self.original_from_pretrained = StableDiffusionPipeline.from_pretrained
        StableDiffusionPipeline.from_pretrained = MagicMock(
            return_value=self.mocked_pipeline
        )

        self.model_path = "test_model_path"

    def tearDown(self):
        StableDiffusionPipeline.from_pretrained = self.original_from_pretrained

    def test_init_conditions(self):
        with patch("torch.backends.mps.is_available", return_value=True), patch(
            "torch.cuda.is_available", return_value=False
        ):
            handler = StableDiffusionHandler(self.model_path)
            self.assertEqual(handler.device, torch.device("mps"))

        with patch("torch.backends.mps.is_available", return_value=False), patch(
            "torch.cuda.is_available", return_value=True
        ), patch("torch.cuda.mem_get_info", return_value=(0, 1000000000)), patch(
            "image_generation.core.stable_diffusion.enough_gpu_memory",
            return_value=True,
        ):
            handler = StableDiffusionHandler(self.model_path)
            self.assertEqual(handler.device, torch.device("cuda"))

        with patch("torch.backends.mps.is_available", return_value=False), patch(
            "torch.cuda.is_available", return_value=False
        ), patch("image_generation.utils.enough_gpu_memory", return_value=False):
            handler = StableDiffusionHandler(self.model_path)
            self.assertEqual(handler.device, torch.device("cpu"))

        custom_device = "custom_device"
        with patch("torch.device") as mock_device:
            mock_device.return_value = custom_device
            handler = StableDiffusionHandler(self.model_path, device=custom_device)
        self.assertEqual(handler.device, custom_device)

    def test_txt_to_img(self):
        handler = StableDiffusionHandler(self.model_path)

        test_text_to_image = TextToImage(
            prompt=Prompt(
                positive="A beautiful landscape with a clear sky",
                negative="bad quality, pixelated",
                guidance_scale=5.0,
            ),
            height=512,
            width=512,
            num_inference_steps=50,
            num_images=1,
        )

        test_image = handler.txt_to_img(test_text_to_image)

        # Check if the self.pipe() was called with the correct arguments in the last call
        last_call_args = self.mocked_pipeline.call_args_list[-1]
        expected_call = call(
            prompt=test_text_to_image.prompt.positive,
            negative_prompt=test_text_to_image.prompt.negative,
            guidance_scale=test_text_to_image.prompt.guidance_scale,
            height=test_text_to_image.height,
            width=test_text_to_image.width,
            num_inference_steps=test_text_to_image.num_inference_steps,
            num_images_per_prompt=test_text_to_image.num_images,
            generator=handler._set_seed(test_text_to_image.seed),
        )
        self.assertEqual(last_call_args, expected_call)

        # Check if the returned image is the one generated by the mocked pipeline
        self.assertEqual(
            test_image[0],
            self.mocked_pipeline.return_value.images.__getitem__.return_value,
        )

    def test_pipeline_property(self):
        handler = StableDiffusionHandler(self.model_path)
        self.assertEqual(handler.pipe, self.mocked_pipeline)

    def test_init_with_device(self):
        handler = StableDiffusionHandler(self.model_path, device="cuda")
        self.assertEqual(handler.device, torch.device("cuda"))
        self.assertEqual(handler.model_path, self.model_path)
        self.assertEqual(handler.pipe, self.mocked_pipeline)

    def test_init_without_device(self):
        handler = StableDiffusionHandler(self.model_path)
        self.assertIsNotNone(handler.device)
        self.assertEqual(handler.model_path, self.model_path)
        self.assertEqual(handler.pipe, self.mocked_pipeline)

    def test_init_model(self):
        handler = StableDiffusionHandler(self.model_path)
        new_model_path = "new_model_path"
        new_mocked_pipeline = MagicMock()
        StableDiffusionPipeline.from_pretrained = MagicMock(
            return_value=new_mocked_pipeline
        )

        handler._init_model(new_model_path)
        self.assertEqual(handler.model_path, new_model_path)
        self.assertEqual(handler.pipe, new_mocked_pipeline)

    # Testing _set_seed method
    def test_set_seed(self):
        handler = StableDiffusionHandler(self.model_path)
        # When seed is -1
        self.assertIsNone(handler._set_seed(-1))

        # When seed is None
        self.assertIsNone(handler._set_seed(None))

        # When seed is a valid integer
        seed = 1234
        generator = handler._set_seed(seed)
        self.assertEqual(generator.initial_seed(), seed)

    # Testing conditions inside the _init_model method
    def test_init_model_cpu(self):
        handler = StableDiffusionHandler(self.model_path, device="cpu")
        self.assertTrue(handler.pipe.enable_sequential_cpu_offload.called)
        handler.pipe.enable_sequential_cpu_offload.assert_called_once()
        handler.pipe.enable_attention_slicing.assert_called_once_with(1)

    def test_init_model_other(self):
        handler = StableDiffusionHandler(self.model_path, device="cuda")
        handler.pipe.enable_attention_slicing.assert_called_once_with(1)
        handler.pipe.to.assert_called_once_with(handler.device)

    # Testing different device scenarios in txt_to_img method
    def test_txt_to_img_mps(self):
        handler = StableDiffusionHandler(self.model_path)
        handler.device = torch.device("mps")
        handler.txt_to_img(self.get_test_text_to_image())
        handler.pipe.assert_called()

    def test_txt_to_img_other(self):
        handler = StableDiffusionHandler(self.model_path)
        handler.device = torch.device("cuda")
        handler.txt_to_img(self.get_test_text_to_image())
        handler.pipe.assert_called()

    def get_test_text_to_image(self):
        return TextToImage(
            prompt=Prompt(
                positive="A beautiful landscape with a clear sky",
                negative="bad quality, pixelated",
                guidance_scale=5.0,
            ),
            height=512,
            width=512,
            num_inference_steps=50,
            num_images=1,
        )

    def test_set_scheduler(self):
        handler = StableDiffusionHandler(self.model_path)
        mock_scheduler = MagicMock()
        with patch(
            "image_generation.core.schedulers.SchedulerHandler.set_scheduler",
            return_value=mock_scheduler,
        ) as mock_set_scheduler:
            scheduler_name = SchedulerEnum.EULER_A

            handler._set_scheduler(scheduler_name)

            mock_set_scheduler.assert_called_once_with(
                scheduler_name=scheduler_name, current_scheduler=ANY
            )
            self.assertEqual(handler.pipe.scheduler, mock_scheduler)
            self.assertEqual(handler.scheduler_name, scheduler_name)


if __name__ == "__main__":
    unittest.main()
